{
    "openapi": "3.0.0",
    "info": {
        "title": "laravel API for forum",
        "version": "0.1"
    },
    "paths": {
        "/api/register": {
            "post": {
                "summary": "Register a new user",
                "operationId": "App\\Http\\Controllers\\AuthController::register",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "email": {
                                        "type": "email"
                                    },
                                    "password": {
                                        "type": "password"
                                    },
                                    "password_confirmation": {
                                        "type": "password"
                                    }
                                },
                                "type": "object",
                                "example": {
                                    "name": "LJ",
                                    "email": "LJ@gmail.com",
                                    "password": "12345678",
                                    "password_confirmation": "12345678"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/update": {
            "post": {
                "tags": [
                    "auth"
                ],
                "summary": "Update",
                "description": "Update user information",
                "operationId": "update",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "email": {
                                        "type": "email"
                                    },
                                    "password": {
                                        "type": "password"
                                    },
                                    "password_confirmation": {
                                        "type": "password"
                                    }
                                },
                                "type": "object",
                                "example": {
                                    "name": "LJ",
                                    "email": "LJ@gmail.com",
                                    "password": "12345678",
                                    "password_confirmation": "12345678"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "api/login": {
            "post": {
                "tags": [
                    "auth"
                ],
                "summary": "Sign in",
                "description": "Login by email, password",
                "operationId": "login",
                "requestBody": {
                    "description": "Pass user credentials",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user1@mail.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "PassWord12345"
                                    },
                                    "persistent": {
                                        "type": "boolean",
                                        "example": "true"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "422": {
                        "description": "Wrong credentials response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Sorry, wrong email address or password. Please try again"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/logout": {
            "post": {
                "tags": [
                    "auth"
                ],
                "summary": "Logout",
                "description": "Logout user and invalidate token",
                "operationId": "logout",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "401": {
                        "description": "Returns when user is not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Not authorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/posts": {
            "get": {
                "tags": [
                    "posts"
                ],
                "summary": "post index",
                "description": "get all post information to show on the post index page",
                "operationId": "postShow",
                "requestBody": {
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Sorry, wrong email address or password. Please try again"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "BaseModel": {
                "properties": {
                    "created_at": {
                        "description": "Initial creation timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": "true"
                    },
                    "updated_at": {
                        "description": "Last update timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": "true"
                    },
                    "deleted_at": {
                        "description": "Soft delete timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": "true"
                    }
                },
                "type": "object"
            },
            "Command": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": "true",
                        "example": "1"
                    },
                    "user_id": {
                        "type": "integer",
                        "example": "1"
                    },
                    "post_id": {
                        "type": "integer",
                        "example": "1"
                    },
                    "content": {
                        "type": "string",
                        "example": "Johnas asdfa asdfasgw"
                    },
                    "created_at": {
                        "$ref": "#/components/schemas/BaseModel/properties/created_at"
                    },
                    "updated_at": {
                        "$ref": "#/components/schemas/BaseModel/properties/updated_at"
                    },
                    "deleted_at": {
                        "$ref": "#/components/schemas/BaseModel/properties/deleted_at"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Command"
                }
            },
            "Post": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": "true",
                        "example": "1"
                    },
                    "user_id": {
                        "type": "integer",
                        "example": "1"
                    },
                    "title": {
                        "type": "string",
                        "example": "John"
                    },
                    "content": {
                        "type": "string",
                        "example": "Johnas asdfa asdfasgw"
                    },
                    "created_at": {
                        "$ref": "#/components/schemas/BaseModel/properties/created_at"
                    },
                    "updated_at": {
                        "$ref": "#/components/schemas/BaseModel/properties/updated_at"
                    },
                    "deleted_at": {
                        "$ref": "#/components/schemas/BaseModel/properties/deleted_at"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Post"
                }
            },
            "User": {
                "required": [
                    "password"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": "true",
                        "example": "1"
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 32,
                        "example": "John"
                    },
                    "email": {
                        "description": "User unique email address",
                        "type": "string",
                        "format": "email",
                        "readOnly": "true",
                        "example": "user@gmail.com"
                    },
                    "email_verified_at": {
                        "description": "Datetime marker of verification status",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": "true",
                        "example": "2019-02-25 12:59:20"
                    },
                    "created_at": {
                        "$ref": "#/components/schemas/BaseModel/properties/created_at"
                    },
                    "updated_at": {
                        "$ref": "#/components/schemas/BaseModel/properties/updated_at"
                    },
                    "deleted_at": {
                        "$ref": "#/components/schemas/BaseModel/properties/deleted_at"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "User"
                }
            },
            "Vote": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": "true",
                        "example": "1"
                    },
                    "user_id": {
                        "type": "integer",
                        "example": "1"
                    },
                    "post_id": {
                        "type": "integer",
                        "example": "1"
                    },
                    "command_id": {
                        "type": "integer",
                        "example": "1"
                    },
                    "status": {
                        "type": "integer",
                        "example": "1"
                    },
                    "content": {
                        "type": "string",
                        "example": "Johnas asdfa asdfasgw"
                    },
                    "created_at": {
                        "$ref": "#/components/schemas/BaseModel/properties/created_at"
                    },
                    "updated_at": {
                        "$ref": "#/components/schemas/BaseModel/properties/updated_at"
                    },
                    "deleted_at": {
                        "$ref": "#/components/schemas/BaseModel/properties/deleted_at"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Vote"
                }
            }
        }
    },
    "security": [
        []
    ]
}